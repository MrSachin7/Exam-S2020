@page "/CreateBook"
@using AuthorAPI.Models
@using AuthorBlazor.Services
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Primitives
@inject IAuthorService AuthorService 
@inject IBookService BookService 
@inject NavigationManager NavMgr;


<div class="box">
    <h3>AddPlayer</h3>
    <EditForm Model="@newBookItem" OnValidSubmit="@AddBookAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group field">
            <span>
                <label>ISBN :</label>
            </span>
            <span>
                <InputNumber @bind-Value="newBookItem.ISBN"/>
            </span>
        </div>
        <div class="form-group field">
            <span>

                <label> Title:</label>
            </span>
            <span>
                <InputTextArea rows="3" @bind-Value="newBookItem.Title"/>
            </span>
        </div>
        <div class="form-group field">
            <span>
                <label>Year of publication</label>
            </span>
            <span>
                <InputNumber @bind-Value="newBookItem.PublicationYear"/>
            </span>
        </div>
        <div class="form-group field">
            <span>
                <label>Number of pages</label>
            </span>
            <span>
                <InputNumber @bind-Value="newBookItem.NumOfPages"/>
            </span>
        </div>

        <div class="form-group field">
            <span>
                <label>Genre:</label>
            </span>
            <span>
                <InputTextArea rows="2" @bind-Value="newBookItem.Genre"/>
            </span>
        </div>
        <div class="form-group field">
            <span>
                <label>Author :</label>
            </span>
            <span>

                @if (_allAuthors != null) {
                    <InputSelect @bind-Value="selectedAuthorId">  
                        <option selected> Select an author</option>
                        @foreach (var author in _allAuthors) {
                            <option value="@author.Id"> @author.FirstName @author.LastName</option>
                        }

                    </InputSelect>
                }



            </span>
        </div>
        <p class="actions">
            <button class="acceptbtn" type="submit">Create</button>
        </p>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorLabel)) {
        <label>@errorLabel</label>
    }
    @if (showModal) {
        <Modal>
            <p>You have successfully added a new Book item. You should be very proud of yourself</p>
            <button @onclick="@Proceed">Wonderful</button>
        </Modal>
    }
</div>


@code {
    private Book newBookItem = new Book();
    private List<Author>? _allAuthors;
    private int? selectedAuthorId;

    private string errorLabel = string.Empty;
    private bool showModal;


    protected override async Task OnInitializedAsync() {
        try {
            _allAuthors = await AuthorService.GetAllAuthors();
        }
        catch (Exception e) {
            errorLabel = e.Message;
        }
    }


    private async Task AddBookAsync() {
        try {
            errorLabel = string.Empty;
            if (selectedAuthorId == null) {
                errorLabel = "Select an author";
                return;
            }
            await BookService.AddBook(newBookItem, selectedAuthorId);
            showModal = true;
        }
        catch (Exception e) {
            errorLabel = e.Message;
        }
    }

    private void Proceed() {
        showModal = false;
        NavMgr.NavigateTo("/BooksAndAuthors");
    }

}