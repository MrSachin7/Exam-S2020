@page "/CreateAuthor"
@using Microsoft.AspNetCore.Components
@using AuthorAPI.Models 
@using AuthorBlazor.Services
@using UIElements             
@inject NavigationManager NavMgr     
@inject IAuthorService AuthorService
@using Microsoft.Extensions.Primitives


<div class="box">
    <h3>Add Author</h3>
    <EditForm Model="@newAuthorItem" OnValidSubmit="@AddAuthorAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
    
        <div class="form-group field">
            <span>
                <label>First Name:</label>
            </span>
            <span>
                <InputTextArea rows="2" @bind-Value="newAuthorItem.FirstName"/>
            </span>
        </div>
      
       
        <div class="form-group field">
            <span>
                <label>Last Name:</label>
            </span>
            <span>
                <InputTextArea rows="2" @bind-Value="newAuthorItem.LastName"/>
            </span>
        </div>
       
        <p class="actions">
            <button class="acceptbtn" type="submit">Create</button>
        </p>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorLabel)) {
        <label>@errorLabel</label>
    }
    @if (showModal) {
        <Modal>
            <p>You have successfully added a new Author item. You should be very proud of yourself</p>
            <button @onclick="@Proceed">Wonderful</button>
        </Modal>
    }
</div>


@code {
    private Author newAuthorItem = new Author();
    private string errorLabel;
    private bool showModal;


    private async Task AddAuthorAsync() {
        try {
            errorLabel = string.Empty;
            await AuthorService.AddAuthorAsync(newAuthorItem);
            showModal = true;
            newAuthorItem = new Author();
        }
        catch (Exception e) {
            errorLabel = e.Message;
        }

    }
    private void Proceed() {
        showModal = false;
        NavMgr.NavigateTo("/BooksAndAuthors");
    }


}